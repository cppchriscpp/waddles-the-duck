screen0: 
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63,  2,  2,  2,  2, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63,  2,  2,  2,  2,  2,  2,  2,  2, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 3,   3, 3,   3,   3,   3,  4,  4,  4,  4,  4,  3,  3,  3, 3, 3
	.byte 1,   1, 1,   1,   1,   1,  1,  1,  1,  1,  1,  1,  1,  1, 1, 1
	.byte 1,   1, 1,   1,   1,   1,  1,  1,  1,  1,  1,  1,  1,  1, 1, 1
	
	
screen1:
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63,  1,  1,  1,  1, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 1,   1,  1,  1,  1,  1,  1,  1, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63
	.byte 3,   3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  3,  3,  3,  3, 3
	.byte 0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0
	.byte 0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0
	
	
lvl1_compressed_ids: 
	; Padding to 16-wide to make math easier
	; Consider this: What could we accomplish with 8 bytes? (1 less shift, 4xrows less bytes)
	; Consider this too: How gross is the math to find a position with 12 vs 16? Is there caching we could do?
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 3, 1, 1, 0, 0, 0, 0
	.byte 63, 63, 63, 63, 63, 63,  2, 63, 63, 3, 1, 1, 0, 0, 0, 0
	.byte 63, 63, 63, 63,  2, 63,  2, 63, 63, 3, 1, 1, 0, 0, 0, 0
	
	.byte 63, 63, 63, 63, 63, 63, 63, 63, 63, 3, 0, 0, 0, 0, 0, 0
	.byte 63, 63, 63, 63, 63, 63,  1, 63, 63, 3, 0, 0, 0, 0, 0, 0
	.byte 63, 63, 63, 63,  1, 63,  1, 63, 63, 3, 0, 0, 0, 0, 0, 0
	
	.byte $ff
	
lvl1_compressed: 
	.byte 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0
	.byte 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 4, 4, 0, 0, 0, 0
	.byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	.byte 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4
	.byte 5, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3
	
	.byte $ff