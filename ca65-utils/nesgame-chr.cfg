MEMORY {
  ZP:     start = $0, size = $f0, type = rw;
  HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;
  RAM:    start = $0300, size = $0500, type = rw;
  ROM00:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM01:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM02:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM03:  start = $C000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;
}

SEGMENTS {
  ZEROPAGE: load = ZP, type = zp;
  BSS:      load = RAM, type = bss, define = yes, align = $100;

  INESHDR:  load = HEADER, type = ro, align = $10;
  BANK0:   load = ROM00, type = ro, align = $100, optional = yes;
  BANK1:   load = ROM01, type = ro, align = $100, optional = yes;
  BANK2:   load = ROM02, type = ro, align = $100, optional = yes;
  DMC:      load = ROM03, type = ro, align = 64, optional = yes;
  CODE:     load = ROM03, type = ro, align = $100;
  RODATA:   load = ROM03, type = ro, align = $100;

  STUB:    load = ROM03, type = ro, start = $FFC0;
  # Following advice for NESDev Compo, and reserving this.
  CHUNK:   load = ROM03, type = ro, start = $FFD0;
  VECTORS: load = ROM03, type = ro, start = $FFFA;
}

FILES {
  %O: format = bin;
}

